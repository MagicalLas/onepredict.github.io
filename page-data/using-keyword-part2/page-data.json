{"componentChunkName":"component---src-templates-blog-post-js","path":"/using-keyword-part2/","result":{"data":{"site":{"siteMetadata":{"title":"Onepredict Engineering"}},"markdownRemark":{"id":"9ab87053-6504-52f5-97ff-23c76ef6e14d","excerpt":"글 목록 JavaScript의 using을 사용해 보자 - Part 1 JavaScript의 using을 사용해 보자 - Part 2 Intro 지난 글에서 예고한 대로 TypeScript…","html":"<h3>글 목록</h3>\n<ol>\n<li><strong><a href=\"/using-keyword/\">JavaScript의 using을 사용해 보자 - Part 1</a></strong></li>\n<li><strong>JavaScript의 using을 사용해 보자 - Part 2</strong></li>\n</ol>\n<h1>Intro</h1>\n<p>지난 글에서 예고한 대로 TypeScript를 이용해, <code class=\"language-text\">using</code>을 명시적으로 사용해 보겠습니다. 리소스를 관리하는 방식을 <code class=\"language-text\">using</code>을 이용하여 작성해 보겠습니다.</p>\n<h3>동기에 대한 명시적 선언</h3>\n<p>다음은 명시적으로 <code class=\"language-text\">Symbol.dispose</code>를 이용하여, 동기 코드에 대해서 종료 함수를 선언하는 방법입니다. <code class=\"language-text\">using</code>이 선언된 블록이 종료되면, 명시된 <code class=\"language-text\">Symbol.dispose</code>에 할당된 함수를 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>dispose<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"using 종료.\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  using fileHandler <span class=\"token operator\">=</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 종료 후, [Symbol.dispose] 실행.</span>\n<span class=\"token comment\">// using 종료. 출력</span></code></pre></div>\n<h3>비동기에 대한 명시적 선언</h3>\n<p>다음은 명시적으로 <code class=\"language-text\">Symbol.asyncDispose</code>를 이용하여, 비동기 코드에 대해서 종료 함수를 선언하는 방법입니다. top-level에서 <code class=\"language-text\">await</code>를 사용하는 모습이 약간은 어색해 보입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getResource</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>asyncDispose<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncSomethingFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> using fileHandler <span class=\"token operator\">=</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>1편으로 돌아가보기</h2>\n<p>1편에서 우리는 데이터베이스 연결에 대한 이야기를 나누어 보았습니다. 지금까지 <code class=\"language-text\">using</code>에 대해서 이야기한 것을 바탕으로 <code class=\"language-text\">using</code>을 이용하여 데이터베이스 연결을 관리해 보겠습니다.</p>\n<h3>getPosts 함수 내부 들여다 보기</h3>\n<p><code class=\"language-text\">using</code>을 쓰지 않는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> db\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  db <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">connectToDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> collection <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"posts\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> posts\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">using</code>을 쓰는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getConnection</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">connectToDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    connection<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>asyncDispose<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">await</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> using db <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> collection <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"posts\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> posts\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 보면 <code class=\"language-text\">try...catch...finally</code>로 연결되는 블록을 <code class=\"language-text\">using</code>을 활용해서 명시적으로 컨트롤할 수 있게 변경된 것을 볼 수 있습니다.</p>\n<h2>실제 폴리필은 어떻게 이루어 질까?</h2>\n<h3>폴리필</h3>\n<p>단계를 분리하여 함수별로 확인해 보겠습니다.</p>\n<p>크게 3가지의 단계로 진행됩니다.</p>\n<ol>\n<li>이미 정의된 <code class=\"language-text\">Symbol</code>객체</li>\n<li><code class=\"language-text\">disposableResource</code>의 관리</li>\n<li>명시된 <code class=\"language-text\">disposeResource</code>의 사용 및 해제</li>\n</ol>\n<h4><code class=\"language-text\">Symbol</code> 정의</h4>\n<p>현재 <code class=\"language-text\">dispose</code>, <code class=\"language-text\">asyncDispose</code>로 정의된 <code class=\"language-text\">Symbol</code>은 <code class=\"language-text\">core-js</code>에 있는 정의를 활용합니다. 해당 파일은 WellKnownSymbol로 <code class=\"language-text\">dispose</code>, <code class=\"language-text\">asyncDispose</code>를 선언합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"core-js/modules/esnext.symbol.dispose.js\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"core-js/modules/esnext.symbol.async-dispose.js\"</span>\n\n<span class=\"token comment\">// WellKnownSymbol로 `dispose`, 'asyncDispose`를 선언합니다.</span>\n\n<span class=\"token comment\">// core-js/moduekls/esnext.symbol.dispose.js</span>\n<span class=\"token function\">defineWellKnownSymbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dispose\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// core-js/moduekls/esnext.symbol.async-dispose.js</span>\n<span class=\"token function\">defineWellKnownSymbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"asyncDispose\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4><code class=\"language-text\">disposable-stack</code>을 활용하기</h4>\n<p>이러한 명시적 관리는 <code class=\"language-text\">disposable-stack</code>으로 명명된 stack을 통해 내부에서 관리하고 있습니다. 실제 내부 코드는 제외하고 사용하는 함수를 표기하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"core-js/modules/esnext.disposable-stack.constructor.js\"</span>\n\n<span class=\"token function\">defineBuiltIns</span><span class=\"token punctuation\">(</span>DisposableStackPrototype<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Dispose Resource 객체를 생성합니다.</span>\n  <span class=\"token function-variable function\">dispose</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Stack에 담겨 있는 동기 Dispose Resource 객체를 꺼내와 dispose method를 실행합니다.</span>\n  <span class=\"token function-variable function\">use</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Stack에 담겨 있는 비동기 Dispose Resource 객체를 꺼내와 dispose method를 실행합니다.</span>\n  <span class=\"token function-variable function\">adopt</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">adopt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> onDispose</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Stack에 담겨 있는 비동기 Dispose Resource 객체를 골라 지연합니다.</span>\n  <span class=\"token function-variable function\">defer</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">defer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onDispose</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 해당 Stack의 instance가 다 비워지면 다음 Stack을 찾아 이동합니다. Stack은 블록 단위로 구성됩니다.</span>\n  <span class=\"token function-variable function\">move</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>실제 TypeScript에서 폴리필을 구성해 주는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> __addDisposableResource <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__addDisposableResource<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>생략<span class=\"token operator\">...</span>\n     <span class=\"token comment\">// built-in으로 되어있는 DisposableResource를 등록합니다.</span>\n    <span class=\"token keyword\">return</span> value\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> __disposeResources <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__disposeResources<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">SuppressedError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">env</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// built-in으로 되어있는 disposeResource 함수를 실행합니다.</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// Error 전달</span>\n    SuppressedError\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<h1>Outro</h1>\n<p>TypeScript5.2에서 폴리필을 구성해서 실제 <code class=\"language-text\">core-js</code>에 구현된 부분까지 훑어보았습니다. <code class=\"language-text\">using</code>을 아직 한 번도 사용해 본 적이 없거나, <code class=\"language-text\">using</code>을 막 도입하여 패턴을 변경하고 싶은 분들에게 필요한 내용들이 되었으면 합니다.</p>\n<p>내일은 마침 추석 연휴가 시작되는 날입니다. 모두 즐거운 한가위 되셨으면 합니다.</p>","fields":{"slug":"/using-keyword-part2/"},"frontmatter":{"title":"JavaScript의 using을 사용해 보자 - Part 2","date":"September 27, 2023","description":"지난 글에서 예고한 대로 TypeScript를 이용해, `using`을 명시적으로 사용해 보겠습니다.\n","author":{"name":"김준기","avatar":null,"greeting":"원프레딕트 Frontend Lead"}}},"previous":{"fields":{"slug":"/using-keyword/"},"frontmatter":{"title":"JavaScript의 using을 사용해 보자 - Part 1"}},"next":{"fields":{"slug":"/typescript-schema-test/"},"frontmatter":{"title":"TypeScript로 API JSON Schema 테스트하기"}}},"pageContext":{"id":"9ab87053-6504-52f5-97ff-23c76ef6e14d","previousPostId":"0c65ac92-3e1a-5bb8-b7f6-fd77f8190abd","nextPostId":"ec655ba2-d3be-5283-822e-9020f8934d90"}},"staticQueryHashes":["2094693779"],"slicesMap":{}}